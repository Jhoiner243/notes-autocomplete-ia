// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String
  lastName        String 
  role            UserRole         @default(ENFERMERA)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  notas           Nota[]
  subscriptions   Subscription[]
  usageRecords    UsageRecord[]    
}

model Nota {
  id        String   @id @default(uuid())
  title     String
  content   String
  metadata  Json
  isDelete  Boolean  @default(false)
  version   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id                   String           @id @default(uuid())
  userId               String
  stripeSubscriptionId String           @unique
  planId               String
  status               StatusSubscription
  currentPeriodEnd     DateTime
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  user                 User             @relation(fields: [userId], references: [id])
  billingHistory       BillingHistory[]
}

model BillingHistory {
  id              String       @id @default(uuid())
  subscriptionId  String      
  stripeInvoiceId String       @unique
  amount          Float
  status          String
  createdAt       DateTime     @default(now())

  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
}

model UsageRecord {
  id             String        @id @default(uuid())
  userId         String
  endpoint       EndpointUsage
  tokensConsumed Int
  costEstimated  Float
  createdAt      DateTime      @default(now())

  user           User          @relation(fields: [userId], references: [id])
}

enum StatusSubscription {
  ACTIVE
  PAST_DUE
  CANCELED
  PENDING
}

enum UserRole {
  ENFERMERA
  DOCTOR
  OTRO
}

enum EndpointUsage {
  AUTOCOMPLETE
}